// Library untuk modul SIM808, parsing data GPS, komunikasi serial pada pin digital, dan manajemen data JSON
#include <Ethernet.h>
#include <SPI.h>
#include <DFRobot_SIM808.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>
#include <SD.h>


// Konfigurasi Modul LAN W5500 Lite
const int w5500ChipSelect = 7; // CS pin untuk W5500
byte mac[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED}; // Alamat MAC untuk W5500
IPAddress ip(192, 168, 100, 1); // Alamat IP statis untuk W5500
IPAddress subnet(255, 255, 255, 0); // Subnet mask
IPAddress gateway(192, 168, 100, 1); // Gateway
IPAddress dns(8, 8, 8, 8); // DNS (dapat disesuaikan dengan konfigurasi jaringan Anda)
EthernetServer server(80);

// Inisialisasi modul SIM808 dan GPS
DFRobot_SIM808 sim808(&Serial1);
SoftwareSerial ss(10, -1); // Pin 10 untuk RX, TX tidak digunakan
TinyGPSPlus gps;

// Variabel untuk manajemen buffer dan interval waktu
const int bufferSize = 256;
unsigned long lastDisplayTime = 0;
const long displayInterval = 300000; // 5 menit

// Variabel untuk menyimpan kualitas sinyal
int globalSignalQuality = -1;

// Global variable untuk menampung respons terakhir dari HTTPACTION
String httpActionResponse = "";

// global variabel  untuk menyimpan nomor pengirim SMS
String nomorPengirimSMS;

// Definisi pin LED
const int RedLEDPin = 3;  // Pin LED merah
const int BlueLEDPin = 5; // Pin LED biru

// Kecerahan LED
const int ledBrightness = 25; // Kira-kira 10% kecerahan

// Variabel global untuk status LED terakhir
bool lastLedStateRed = false;
bool lastLedStateBlue = false;

// Definisi pin untuk SPI Communication
const int chipSelect = 53;

// Variabel untuk manajemen waktu pemeriksaan log
unsigned long lastLogCheckTime = 0;
const long logCheckInterval = 420000; // 7 menit dalam milidetik

// Tambahkan ini di bagian deklarasi variabel global
unsigned long lastGPRSCheckTime = 0;
const long gprsCheckInterval = 120000; // 2 menit dalam milidetik

// Variabel global untuk mengelola waktu pengiriman data terakhir
unsigned long lastDataSendTime = 0;
const long networkCheckIntervalAfterSend = 150000; // 2.5 menit dalam milidetik

// Timer untuk pengecekan status GPRS dan Internet
unsigned long lastInternetCheckTime = 0;
const long internetCheckInterval = 150000; // 2.5 menit dalam milidetik

// Variabel global untuk nama file log data
const char* namaFileLog = "/data_log.csv";

//melacak waktu terakhir ketika pengecekan koneksi internet dilakukan sebelum mengirim data GPS
unsigned long lastPreDataSendInternetCheckTime = 0;


void setup() {
    // Inisialisasi komunikasi serial untuk debugging
    Serial.begin(9600);
    while (!Serial) {
        ; // Tunggu serial port terhubung. Hanya dibutuhkan untuk papan dengan USB serial native
    }    

    // Inisialisasi Ethernet dengan IP, subnet mask, gateway, dan DNS
    Ethernet.init(w5500ChipSelect); // Spesifikasikan pin CS untuk W5500 jika tidak menggunakan default
    Ethernet.begin(mac, ip, dns, gateway, subnet); // Inisialisasi Ethernet dengan konfigurasi jaringan
    server.begin();
    Serial.print("Server IP: ");
    Serial.println(Ethernet.localIP());

    //inisial SD card module
    Serial.println("Inisialisasi SD card...");

    pinMode(chipSelect, OUTPUT);

    if (!SD.begin(chipSelect)) {
        Serial.println("Inisialisasi SD card gagal!");
        // Jangan kembalikan fungsi; lanjutkan dengan inisialisasi lainnya
    } else {
        Serial.println("Inisialisasi SD card berhasil.");
    }


    // Inisialisasi pin LED dan komunikasi serial lainnya
    pinMode(RedLEDPin, OUTPUT); // Inisialisasi pin LED merah
    analogWrite(RedLEDPin, ledBrightness); // Nyalakan LED merah

    // Inisialisasi komunikasi serial untuk modul SIM808
    Serial1.begin(9600);
    delay(10000); // Delay untuk menunggu modul siap
    Serial.println("start ------ ");
    inisialisasiSIM808();    // Inisialisasi modul SIM808

    // Mengatur notifikasi SMS baru ke output serial
    kirimPerintahAT("AT+CNMI=2,2,0,0,0", "OK", 5000);
    Serial.println("Menginisialisasi modul GPS...");
    ss.begin(9600); // Mulai komunikasi dengan modul GPS

    pinMode(BlueLEDPin, OUTPUT); // Inisialisasi pin LED biru
}

void loop() {
    unsigned long currentMillis = millis();

    // Membaca data dari modul GPS dan mengolahnya
    while (ss.available() > 0) {
        char c = ss.read();
        gps.encode(c);
    }

    // Membaca SMS masuk dan memprosesnya
    if (Serial1.available()) {
        String smsHeader = Serial1.readStringUntil('\n');
        if (smsHeader.startsWith("+CMT:")) {
            String nomorPengirim = ekstrakNomorPengirim(smsHeader);
            String isiSMS = Serial1.readStringUntil('\n');
            if (isiSMS.indexOf("where") != -1) {
                kirimInfoGPS(nomorPengirim); // Kirim informasi GPS
                hapusSemuaSMS(); // Hapus semua SMS setelah membalas
            } else if (isiSMS.indexOf("reset") != -1) {
                inisialisasiSIM808(); // Melakukan reset pada SIM808
                kirimSMS(nomorPengirim, "Reset berhasil"); // Mengirim SMS balasan
                hapusSemuaSMS(); // Hapus semua SMS setelah membalas
            }
        }
    }

    // Pengecekan koneksi internet 1 menit sebelum mengirim data GPS
    if (currentMillis - lastPreDataSendInternetCheckTime >= displayInterval - 60000 && 
        currentMillis - lastDisplayTime >= displayInterval - 60000) {
        cekSinyal();
        // cekStatusGPRS(); // Memeriksa status GPRS
        cekKoneksiInternet();
        lastPreDataSendInternetCheckTime = currentMillis;
    }

    

    // Cek apakah sudah waktunya mengirim data GPS reguler
    if (currentMillis - lastDisplayTime >= displayInterval) {
        if (gps.location.isUpdated()) {
            globalSignalQuality = cekSinyal();
            String dataGPS = getDataGPS(); // Data dalam format JSON

            // Coba kirim data ke server, jika gagal simpan ke SD card dalam format CSV
            if (!kirimDataKeServer(dataGPS)) {
                String dataCSV = getDataCSV(); // Data dalam format CSV
                simpanDataKeSD(dataCSV);
            }
        }
        lastDisplayTime = currentMillis;
    }

    // Cek jumlah satelit dan perbarui status LED
    int satelliteCount = getSatelliteCount();
    if (satelliteCount == 0) {
        // Nyalakan LED merah jika tidak ada satelit
        updateLedState(true, false);
    } else {
        // Nyalakan LED biru jika ada satelit
        updateLedState(false, true);
    }

    // Menangani request client LAN W5500
    EthernetClient client = server.available();
    if (client) {
        boolean currentLineIsBlank = true;
        String httpReq = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                httpReq += c;

                if (c == '\n' && currentLineIsBlank) {
                    if (httpReq.startsWith("GET /data")) {
                        String path = httpReq.substring(4, httpReq.indexOf(' ', 5));
                        handleDataRequest(client, path);
                    } else {
                        // Endpoint lain atau respon default
                        sendJsonResponse(client);
                    }
                    break;
                }
                if (c == '\n') {
                    currentLineIsBlank = true;
                } else if (c != '\r') {
                    currentLineIsBlank = false;
                }
            }
        }
        delay(10);
        client.stop();
    }
}



// Fungsi untuk mengekstrak nomor pengirim dari header SMS
String ekstrakNomorPengirim(String header) {
    int mulai = header.indexOf('\"') + 1;
    int akhir = header.indexOf('\"', mulai);
    return header.substring(mulai, akhir);
}

// Fungsi untuk mendapatkan data GPS dan menyusunnya dalam format CSV
String getDataCSV() {
    String dataCSV;
    dataCSV += getFormattedDate(gps) + ",";
    dataCSV += String(gps.location.lat(), 6) + ",";
    dataCSV += String(gps.location.lng(), 6) + ",";
    dataCSV += String(gps.speed.knots(), 2) + ",";
    dataCSV += String(gps.satellites.value()) + ",";
    dataCSV += String(gps.hdop.value()) + ",";
    dataCSV += String(globalSignalQuality);
    
    return dataCSV;
}

// Fungsi untuk memeriksa kualitas sinyal seluler
int cekSinyal() {
    // Membersihkan buffer Serial1
    while(Serial1.available()) {
        Serial1.read();
    }
    // Mengirim perintah AT untuk cek sinyal
    Serial1.println("AT+CSQ");
    
    // Tunggu respons dari modul
    unsigned long startTime = millis();
    while (millis() - startTime < 10000) {
        if (Serial1.available()) {
            String res = Serial1.readStringUntil('\n');
            // Jika respons adalah kualitas sinyal, tampilkan dan kembalikan nilai tersebut
            if (res.startsWith("+CSQ:")) {
                int signalQuality = res.substring(6, res.indexOf(",")).toInt();
                Serial.print("Signal Quality: ");
                Serial.println(signalQuality);
                return signalQuality;
            }
        }
    }
    Serial.println("No response for signal quality or timeout occurred.");
    return -1; // Jika tidak ada respons, kembalikan -1
}

//mendapatkan jumlah satelit
int getSatelliteCount() {
    if (gps.satellites.isValid()) {
        return gps.satellites.value();
    } else {
        return 0;
    }
}

String generateFileListHTML() {
    File root = SD.open("/");
    if (!root) {
        return "Tidak dapat membuka direktori root.";
    }
    if (!root.isDirectory()) {
        return "Root bukan direktori.";
    }

    String html = "<html><body><h1>Daftar File</h1><ul>";
    File file = root.openNextFile();
    while (file) {
        if (file.isDirectory()) {
            // Jika direktori, abaikan
        } else {
            // Tampilkan nama file dan ukuran
            html += "<li><a href=\"/data/";
            html += file.name();
            html += "\">";
            html += file.name();
            html += "</a> (";
            html += file.size();
            html += " bytes)</li>";
        }
        file = root.openNextFile();
    }
    html += "</ul></body></html>";
    return html;
}

void kirimSMS(String nomorTujuan, String isiPesan) {
    Serial.println("Mengirim SMS...");
    kirimPerintahAT("AT+CMGF=1", "OK", 5000); // Mengatur mode teks untuk SMS
    kirimPerintahAT(("AT+CMGS=\"" + nomorTujuan + "\"").c_str(), ">", 10000); // Menyiapkan pengiriman SMS
    Serial1.println(isiPesan); // Mengirim isi pesan
    Serial1.write(26); // Karakter penutup CTRL+Z
    delay(1000); // Menunggu pesan terkirim
    Serial.println("SMS terkirim.");
}

void sendJsonResponse(EthernetClient &client) {
    String jsonData = getDataGPS();
    
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: application/json");
    client.println("Connection: close");
    client.println();
    client.println(jsonData);
}

// Fungsi Pengolahan Permintaan Data LAN W5500
void handleDataRequest(EthernetClient &client, String request) {
    if (request == "/data" || request == "/data/") {
        String fileListHTML = generateFileListHTML();
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/html");
        client.println("Connection: close");
        client.println();
        client.println(fileListHTML);
    } else {
        // Potong bagian "/data/"
        String fileName = request.substring(6); 
        if (SD.exists(fileName.c_str())) {
            File file = SD.open(fileName.c_str());
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: application/octet-stream");
            client.println("Connection: close");
            client.println();

            // Kirim file
            while (file.available()) {
                client.write(file.read());
            }
            file.close();
        } else {
            client.println("HTTP/1.1 404 Not Found");
            client.println("Connection: close");
            client.println();
        }
    }
    client.stop();
}

// Fungsi untuk menambahkan header CSV jika file kosong atau baru dibuat
void tambahHeaderCSV() {
    // Cek apakah file ada dan ukurannya adalah 0
    if (!SD.exists(namaFileLog) || SD.open(namaFileLog).size() == 0) {
        File file = SD.open(namaFileLog, FILE_WRITE);
        if (file) {
            // Tulis header kolom
            file.println("Waktu, Latitude, Longitude, Kecepatan, Satelit, HDOP, Kualitas Sinyal");
            file.close();
        } else {
            Serial.println("Gagal membuka file log untuk menambahkan header.");
        }
    }
}

// Fungsi untuk menyimpan data GPS ke kartu microSD dalam format CSV
void simpanDataKeSD(const String& dataCSV) {
    File file = SD.open(namaFileLog, FILE_WRITE);
    if (file) {
        Serial.println("Menyimpan data ke SD card...");
        file.println(dataCSV); // Tambahkan data CSV ke akhir file
        file.close();
        Serial.println("Data berhasil disimpan ke SD card.");
    } else {
        Serial.println("Gagal membuka file di SD card.");
    }
}

void updateLedState(bool redState, bool blueState) {
    if (lastLedStateRed != redState) {
        digitalWrite(RedLEDPin, redState ? HIGH : LOW);
        lastLedStateRed = redState;
    }
    // Dalam fungsi updateLedState()
    if (lastLedStateBlue != blueState) {
        analogWrite(BlueLEDPin, blueState ? ledBrightness : 0);
        lastLedStateBlue = blueState;
    }

}

bool cekKoneksiInternet() {
    // Inisialisasi HTTP service untuk memeriksa koneksi internet    
    kirimPerintahAT("AT+HTTPPARA=\"CID\",1", "OK", 5000);
    kirimPerintahAT("AT+HTTPPARA=\"URL\",\"http://www.google.com\"", "OK", 5000);

    // Mulai GET action
    Serial.println("Melakukan HTTP GET request...");

    if (kirimPerintahAT("AT+HTTPACTION=0", "+HTTPACTION: 0,200,", 20000)) {
        Serial.println("HTTP GET request berhasil, terhubung ke internet!");
        // Mengembalikan true jika permintaan HTTP GET berhasil
        return true;
    } else if (kirimPerintahAT("AT+HTTPACTION=0", "+HTTPACTION: 0,200,", 25000)) {
        Serial.println("HTTP GET request berhasil, terhubung ke internet!");
        // Mengembalikan true jika permintaan HTTP GET berhasil
        return true;
    } else if (kirimPerintahAT("AT+HTTPACTION=0", "+HTTPACTION: 0,200,", 30000)) {
        Serial.println("HTTP GET request berhasil, terhubung ke internet!");
        // Mengembalikan true jika permintaan HTTP GET berhasil
        return true;
    } else {
        Serial.println("Gagal melakukan HTTP GET request, periksa koneksi GPRS atau saldo data.");
        // Jika permintaan HTTP GET gagal, mengembalikan false
        // dan inisialisasi ulang SIM808
        inisialisasiSIM808();
        return false;
    }

    // Hentikan HTTP service untuk melepaskan resource
    kirimPerintahAT("AT+HTTPTERM", "OK", 5000);
}


bool kirimPerintahAT(const String& perintah, const String& responsExpected, unsigned long timeout) {
    Serial1.println(perintah);
    Serial.print("Kirim ke SIM808: ");
    Serial.println(perintah);

    unsigned long start = millis();
    String responModul = "";
    while (millis() - start < timeout) {
        if (Serial1.available()) {
            char c = Serial1.read();
            responModul += c;

            if (responModul.endsWith("\r\n")) {
                Serial.print("Respon dari SIM808: ");
                Serial.println(responModul);
                if (responModul.indexOf(responsExpected) != -1) {
                    return true; // Jika respons yang diharapkan ditemukan
                }
                responModul = ""; // Bersihkan untuk baris berikutnya
            }
        }
    }
    return false; // Jika respons yang diharapkan tidak ditemukan
}

// Fungsi untuk menginisialisasi ulang modul SIM808 jika terjadi masalah konektivitas
void rekoneksi() {
    Serial.println("Melakukan rekoneksi...");
    inisialisasiSIM808();
    Serial.println("Rekoneksi selesai.");
}

// Fungsi untuk menampilkan data GPS
void tampilkanDataGPS() {
    // Penyusunan data GPS ke format JSON
    StaticJsonDocument<bufferSize> jsonDoc;
    jsonDoc["device_id"] = 102;
    jsonDoc["datetime"] = getFormattedDate(gps);
    jsonDoc["lat"] = gps.location.lat();
    jsonDoc["lng"] = gps.location.lng();
    jsonDoc["speed_knots"] = gps.speed.knots();
    jsonDoc["course"] = gps.course.deg();
    // jsonDoc["altitude"] = gps.altitude.meters();
    jsonDoc["satellites"] = gps.satellites.value();
    jsonDoc["HDOP"] = gps.hdop.value();    
    jsonDoc["sinyal"] = globalSignalQuality; // Use the globalSignalQuality variable

    String jsonString;
    serializeJson(jsonDoc, jsonString);

    // Cek kualitas sinyal sebelum mengirim data
    if (!cekSinyal()) {
        // Jika sinyal buruk, simpan data langsung ke microSD
        simpanDataKeSD(jsonString);
        return;
    }
    // Jika sinyal baik, kirim data ke server
    kirimDataKeServer(jsonString);

}

// Fungsi untuk mendapatkan data GPS dan menyusunnya dalam format JSON
String getDataGPS() {
    // Penyusunan data GPS ke format JSON
    StaticJsonDocument<bufferSize> jsonDoc;
    jsonDoc["device_id"] = 102;
    jsonDoc["datetime"] = getFormattedDate(gps);
    jsonDoc["lat"] = gps.location.lat();
    jsonDoc["lng"] = gps.location.lng();
    jsonDoc["speed_knots"] = gps.speed.knots();
    jsonDoc["course"] = gps.course.deg();
    // jsonDoc["altitude"] = gps.altitude.meters();
    jsonDoc["satellites"] = gps.satellites.value();
    jsonDoc["HDOP"] = gps.hdop.value();    
    jsonDoc["sinyal"] = globalSignalQuality;

    String jsonString;
    serializeJson(jsonDoc, jsonString);

    // Cetak string JSON ke Serial Monitor untuk debugging
    Serial.println("JSON String to send:");
    Serial.println(jsonString);

    return jsonString;
}

// Fungsi untuk mengirim data ke server melalui HTTP POST
bool kirimDataKeServer(const String& data) {
    int dataLength = data.length();
    String httpDataCommand = "AT+HTTPDATA=" + String(dataLength) + ",10000";

    // Pastikan tidak ada sesi HTTP yang masih berjalan
    kirimPerintahAT("AT+HTTPTERM", "OK", 2000);
    delay(1000);

    // Inisialisasi sesi HTTP baru
    kirimPerintahAT("AT+HTTPINIT", "OK", 5000);
    kirimPerintahAT("AT+HTTPPARA=\"CID\",1", "OK", 2000);
    kirimPerintahAT("AT+HTTPPARA=\"URL\",\"http://track.gpscenter.id/api/data.php\"", "OK", 2000);
    kirimPerintahAT("AT+HTTPPARA=\"CONTENT\",\"application/json\"", "OK", 2000);
    Serial.println("HTTP session initialized.");

    // Siapkan untuk mengirim data
    if (kirimPerintahAT(httpDataCommand.c_str(), "DOWNLOAD", 20000)) {
        // Kirim data JSON ke modul SIM808
        Serial1.print(data);
        delay(1000); // Tunggu data terkirim

        // Mulai aksi HTTP POST
        kirimPerintahAT("AT+HTTPACTION=1", "OK", 5000);

    // Tunggu respons dari aksi HTTP POST
    bool isDataSent = false;
    unsigned long startWaitTime = millis();
    while (millis() - startWaitTime < 60000) { // Tunggu maksimal 60 detik untuk respons
        if (Serial1.available()) {
            String line = Serial1.readStringUntil('\n');
            if (line.startsWith("+HTTPACTION:")) {
                Serial.println(line); // Cetak respons lengkap untuk debug
                int statusCode = line.substring(line.indexOf(",") + 1, line.lastIndexOf(",")).toInt();
                if (statusCode == 200) {
                    Serial.println("HTTP POST successful with status code 200.");
                    isDataSent = true;
                    lastDataSendTime = millis(); // Perbarui waktu pengiriman data terakhir
                    break; // Keluar dari loop jika respons diterima
                } else {
                    Serial.print("HTTP POST failed with status code: ");
                    Serial.println(statusCode);
                    // Simpan data ke SD card jika pengiriman gagal
                    simpanDataKeSD(data);
                    Serial.println("Data has been saved to microSD card.");
                    // Coba koneksi internet
                    if (!cekKoneksiInternet()) {
                        // Ping gagal, inisialisasi ulang modul SIM808
                        inisialisasiSIM808();
                        Serial.println("koneksi internet failed, reinitializing SIM808.");
                        } else {
                            Serial.println("koneksi internet successful, no need to reinitialize SIM808.");
                        }
                    break;
                }
            }
        }
    }

        // Jika data dikirim dengan sukses, baca balasan dari server
        if (isDataSent) {
            // Lanjutkan dengan membaca respons server menggunakan AT+HTTPREAD
            kirimPerintahAT("AT+HTTPREAD", "OK", 5000);
            String httpResponse;
            startWaitTime = millis();
            while (millis() - startWaitTime < 15000) { // Tunggu maksimal 15 detik untuk respons
                if (Serial1.available()) {
                    httpResponse = Serial1.readStringUntil('\n');
                    if (httpResponse.length() > 0) {
                        Serial.println(httpResponse); // Cetak respons server untuk debug
                        break;
                    }
                }
            }
            return true;
        } else {
            // Simpan data ke SD card jika pengiriman gagal
            simpanDataKeSD(data);
        }
    } else {
        // HTTPDATA command gagal, lakukan inisialisasi ulang
        Serial.println("HTTPDATA command failed, reinitializing SIM808.");
        // Simpan data ke SD card jika HTTPDATA command gagal
        simpanDataKeSD(data);
        inisialisasiSIM808();
    }

    // Tutup sesi HTTP setelah selesai
    kirimPerintahAT("AT+HTTPTERM", "OK", 2000);
    return false; // Kembalikan false jika keseluruhan proses tidak berhasil
}


// Fungsi untuk memeriksa status koneksi GPRS berdasarkan keberadaan alamat IP
bool cekStatusGPRS() {
    Serial.println("Memeriksa status attachment GPRS...");
    kirimPerintahAT("AT+CGATT?", "OK", 5000);

    unsigned long startTime = millis();
    String response = "";
    bool responseReceived = false;

    // Loop menunggu respons selama maksimal 5 detik
    while (millis() - startTime < 5000) {
        if (Serial1.available()) {
            char c = Serial1.read();
            response += c;
            if (response.endsWith("\r\n")) {
                // Respons lengkap diterima
                responseReceived = true;
                break;
            }
        }
    }

    // Penanganan jika tidak ada respons atau terjadi error
    if (!responseReceived) {
        Serial.println("Timeout atau tidak ada respons dari modul.");
        return false;
    }

    if (response.indexOf("ERROR") != -1) {
        Serial.println("Respons ERROR dari modul.");
        return false;
    }

    // Mengecek apakah modul terhubung ke jaringan GPRS
    if (response.indexOf("+CGATT: 1") != -1) {
        Serial.println("GPRS terhubung.");
        return true;
    } else {
        Serial.println("GPRS tidak terhubung.");
        return false;
    }
}




// Fungsi untuk menginisialisasi modul SIM808
void inisialisasiSIM808() {
    delay(10000);
    Serial.println("Menginisialisasi SIM808...");

    kirimPerintahAT("AT+CFUN=0", "OK", 2000);
    delay(10000);

    kirimPerintahAT("AT+CFUN=1", "OK", 2000);
    delay(10000);

    delay(2000);
    kirimPerintahAT("AT+CFUN=1", "OK", 2000);
    delay(3000);

    kirimPerintahAT("AT+CSQ", "OK", 2000);
    kirimPerintahAT("AT+CMGF=1", "OK", 2000);

    kirimPerintahAT("AT+SAPBR=3,1,\"Contype\",\"GPRS\"", "OK", 2000);
    kirimPerintahAT("AT+SAPBR=3,1,\"APN\",\"internet\"", "OK", 2000);
    kirimPerintahAT("AT+SAPBR=3,1,\"USER\",\"wap\"", "OK", 2000);
    kirimPerintahAT("AT+SAPBR=3,1,\"PWD\",\"wap123\"", "OK", 2000);

    // Mengakhiri sesi HTTP yang mungkin masih berlangsung
    kirimPerintahAT("AT+HTTPTERM", "OK", 2000);
    delay(2000);

    kirimPerintahAT("AT+SAPBR=1,1", "OK", 10000);
    kirimPerintahAT("AT+HTTPINIT", "OK", 5000); // Diperpanjang menjadi 5 detik
    delay(2000);
    kirimPerintahAT("AT+HTTPPARA=\"CID\",1", "OK", 5000); // Diperpanjang menjadi 5 detik
}



// Fungsi untuk membaca SMS dan menentukan jenis perintah
String bacaSMS() {
    if (Serial1.available()) {
        String sms = Serial1.readString();
        if (sms.indexOf("+CMT:") != -1) {
            int startIndex = sms.indexOf("\"+") + 2;
            int endIndex = sms.indexOf("\",\"", startIndex);
            nomorPengirimSMS = sms.substring(startIndex, endIndex);

            if (sms.indexOf("reset") != -1) {
                return "reset";
            } else if (sms.indexOf("where") != -1) {
                return "where";
            }
        }
    }
    return ""; // Tidak ada perintah yang ditemukan
}


// Fungsi untuk mengirim SMS dengan informasi GPS
void kirimInfoGPS(String nomorTujuan) {
    // Dapatkan informasi GPS
    String lat = String(gps.location.lat(), 6);
    String lng = String(gps.location.lng(), 6);
    String speed = String(gps.speed.knots(), 2);
    int satellites = gps.satellites.value();
    String hdop = String(gps.hdop.hdop(), 2);
    int signalStrength = globalSignalQuality;
    String datetime = convertToUTC8(gps); // Mendapatkan datetime dalam UTC+8

    // Isi SMS
    String isiSMS = "Device_ID: 102\n";
    isiSMS += "Datetime: " + datetime + "\n"; // Menambahkan datetime UTC+8
    isiSMS += "http://maps.google.com/maps?q=loc:" + lat + "," + lng + "\n";
    isiSMS += "Speed: " + speed + " Knots\n";
    isiSMS += "Satellites: " + String(satellites) + " HDOP: " + hdop + "\n";
    isiSMS += "Signal Strength: " + String(signalStrength);

    // Mengirim SMS
    kirimPerintahAT(("AT+CMGS=\"" + nomorTujuan + "\"").c_str(), ">", 10000);
    Serial1.println(isiSMS);
    Serial1.write(26); // CTRL+Z untuk mengirim

    // Cetak informasi ke Serial Monitor
    Serial.println("SMS terkirim ke: " + nomorTujuan);
    Serial.println("Isi SMS: " + isiSMS);
}

// Fungsi untuk menghapus semua SMS
void hapusSemuaSMS() {
    // Mengirim perintah AT untuk menghapus semua SMS
    kirimPerintahAT("AT+CMGD=1,4", "OK", 5000);
    Serial.println("Semua SMS telah dihapus.");
}

//fungsi UTC+8
String convertToUTC8(const TinyGPSPlus &gps) {
    int hour = gps.time.hour() + 8; // Menambahkan 8 jam ke UTC
    if (hour >= 24) hour -= 24; // Menyesuaikan jika melampaui tengah malam

    char dateTime[32];
    sprintf(dateTime, "%04d-%02d-%02d %02d:%02d:%02d UTC+8", 
            gps.date.year(), gps.date.month(), gps.date.day(),
            hour, gps.time.minute(), gps.time.second());

    return String(dateTime);
}

// Fungsi untuk mendapatkan tanggal dan waktu dalam format tertentu dari data GPS
String getFormattedDate(const TinyGPSPlus &gps) {
    // Mengonversi data waktu dari GPS ke string
    char dateBuffer[32];
    sprintf(dateBuffer, "%04d-%02d-%02dT%02d:%02d:%02dZ", gps.date.year(), gps.date.month(), gps.date.day(),
            gps.time.hour(), gps.time.minute(), gps.time.second());
    return String(dateBuffer);
}

// Fungsi utilitas untuk mengirim perintah AT ke modul SIM808 dan menunggu respons
bool kirimPerintahAT(const char* perintah, const char* respons, unsigned long timeout) {
    Serial1.println(perintah);
    // Menunggu dan memeriksa respons dari modul SIM808
    unsigned long start = millis();
    while (millis() - start < timeout) {
        if (Serial1.available()) {
            String res = Serial1.readString();
            Serial.print(res);
            if (res.indexOf(respons) != -1) {
                return true;
            }
        }
    }
    return false;
}
